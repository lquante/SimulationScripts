#!/usr/bin/env bash
set -e

print_usage() {
  cat <<EOF
start-model - start a specified model on sbatch
Usage:
    $0 [OPTIONS] SETTINGSFILE
Options:
    --model PATH   Path to model binary (default: CURRENT/model)
    --python       Run model in python, most likely python script
    --cpus CPUS        Number of cpus (default: 16)
    --jobname JOBNAME  Name of job (default: model)
    --logdir PATH      Directory for log output (default: CURRENT)
    --maxtime TIME     Max runtime (default: 1-00:00:00)
    --queue QUEUE      Cluster queue: short (default), priority, medium, long, ram_gpu
    --workdir PATH     Directory to work in (default: CURRENT)
    --qos QOS          Cluster QOS: short (default, medium, long, io, priority, standby
    --partition        Cluster partition: standard (default), priority, ram_gpu, io
EOF
  exit 1
}

# set defaults:
model="$(pwd)/model"
python=$FALSE
jobname="model"
logdir=$(pwd)
queue="short"
cpus=16
memory=60000
time="1-00:00:00"
workdir=$(pwd)
partition="standard"
qos="short"
constraint="haswell"

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  --model)
    shift || print_usage
    model="$1"
    ;;
  --python)
    shift || print_usage
    python="$1"
    ;;
  --cpus)
    shift || print_usage
    cpus="$1"
    ;;
  --memory)
    shift || print_usage
    memory="$1"
    ;;
  --jobname)
    shift || print_usage
    jobname="$1"
    ;;
  --logdir)
    shift || print_usage
    logdir="$1"
    ;;
  --qos)
    shift || print_usage
    qos="$1"
    ;;
  --partition)
    shift || print_usage
    partition="$1"
    ;;
  --queue)
    shift || print_usage
    queue="$1"
    case "$queue" in
    priority)
      partition="priority"
      ;;
    standby)
      partition="priority"
      ;;
    short | medium | long)
      partition="standard"
      ;;
    ram_gpu)
      partition="ram_gpu"
      queue="short"
      ;;
    broadwell)
      partition="broadwell"
      constraint="broadwell"
      queue="short"
      ;;
    io)
      partition="io"
      queue="io"
      cpus=1
      ;;
    *)
      echo "Unknown cluster queue '$queue'"
      exit 1
      ;;
    esac
    ;;
  --time)
    shift || print_usage
    time="$1"
    ;;
  --workdir)
    shift || print_usage
    workdir="$1"
    ;;
  *)
    if [[ -z "$settings" ]]; then
      settings="$1"
    else
      print_usage
    fi
    ;;
  esac
  shift
done

if [[ -z "$settings" ]]; then
  print_usage
fi

if [[ ! -e "$model" ]]; then
  echo "Cannot find $model"
  exit 1
fi

mkdir -p "$workdir"
mkdir -p "$logdir"

slurmheader=$(
  cat <<EOF
#SBATCH --job-name="$jobname"
#SBATCH --qos=$queue
#SBATCH --partition=$partition
#SBATCH --constraint=$constraint
#SBATCH --output=$logdir/%j.txt
#SBATCH --error=$logdir/%j.txt
#SBATCH --account=acclimat
#SBATCH --nice=0
#SBATCH --profile=none
#SBATCH --acctg-freq=energy=0
#SBATCH --time=$time
#SBATCH --export=ALL,OMP_PROC_BIND=FALSE,OMP_NUM_THREADS=$cpus
#SBATCH --mail-type=FAIL,TIME_LIMIT
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=$cpus
#SBATCH --mem=$memory
#SBATCH --workdir=$workdir
EOF
)
if [ "$python" == 1 ]; then
  job=$(
    cat <<EOFJOB
#!/usr/bin/env bash
$slurmheader
$model --settings "$settings"
EOFJOB
  )
else
  job=$(
    cat <<EOFJOB
#!/usr/bin/env bash
$slurmheader
$model "$settings"
EOFJOB
  )
fi
sbatch <<<"$job"
